.TH _PRINTF 1 "March 2025" "1.0" "Custom Print Function"

.SH NAME
_printf - Custom implementation of the printf function

.SH SYNOPSIS
.B #include "main.h"

.B int _printf(const char *format, ...);

.SH DESCRIPTION
.B _printf
is a function that produces output according to a format string. It mimics the behavior of the standard printf function found in the C standard library.

.PP
The function writes output to the standard output stream (stdout) based on the format string specified. The format string can contain ordinary characters that are printed as-is, and format specifiers that determine how the additional arguments are formatted and printed.

.SH PARAMETERS
.TP
.B format
A null-terminated string containing zero or more directives. Directives are composed of ordinary characters (which are printed as-is) and conversion specifiers (which start with %).

.TP
.B ... (variadic arguments)
A variable number of arguments that correspond to the format specifiers in the format string.

.SH RETURN VALUE
The function returns the total number of characters printed (excluding the null byte used to end output to strings). If an error occurs, it returns -1.

.SH SUPPORTED FORMAT SPECIFIERS
The _printf function currently supports the following conversion specifiers:
.TP
.B %c
Prints a single character.
.TP
.B %s
Prints a null-terminated string.
.TP
.B %d, %i
Prints a signed decimal integer.
.TP
.B %%
Prints a literal percent character (%).

.SH EXAMPLES
.nf
#include "main.h"

int main(void)
{
_printf("Hello, %s!\n", "world");
_printf("Character: %c\n", 'A');
_printf("Number: %d\n", 42);
return (0);
}
.fi

.SH NOTES

If the format string is NULL, the function returns -1.

Unsupported format specifiers are printed as-is, including the leading %.

.SH AUTHOR
Written by Holberton School students as part of a project.

.SH SEE ALSO
.BR printf (3),
.BR write (2)
